{"version":3,"sources":["../src/exportExcel.ts","../src/helpers.ts","../src/exportPdf.ts","../src/exportTextFile.tsx","../src/index.ts"],"names":["BwipJs","convertDateTime","tgl","now","year","month","day","hours","minutes","seconds","ExcelJS","ExportExcel","columns","data","grouping","date","excelSetting","title","workbook","item","worksheet","lastUsedColumnIndex","judul","cell","tanggalRow","additionalText","columnValue","totals","group","column","formatingTitle","cellData","subtotal","itemDetail","rowData","value","alignment","columnKey","row","index","subtotalRow","columnIndex","endRow","totalFormula","grandTotalCell","barcodeOption","canvas","imageId","firstColumn","vertical","verticalAlignment","grandTotalRow","buffer","blob","link","exportExcel_default","word","jsPDF","autoTable","ExportPDF","pdfSetting","doc","tableRows","finalY","widthPortrait","headerLeft","tableHeader","list2","footersubtotal","total","colSpan","grandTotal","pages","pageWidth","pageHeight","j","horizontalPos","verticalPos","exportPdf_default","generateNotaSlip","res","notaGenerated","nota","load","replaceLoop","_match","p1","p2","loopContent","acc","val","c","key","keyCustomer","sliceNamaBarang","keyDeskripsi","sliceDeskripsi","sliceNama","ExportToTxt","nama_file","downloadLink","exportTextFile_default","ExportData","type","txtSetting","databaru","list"],"mappings":"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","sourcesContent":["import BwipJs from \"bwip-js/browser\";\nimport { convertDateTime } from \"./helpers\";\nimport {\n  ColumnGenarator,\n  DataItemGenerator,\n  GenaratorExport\n} from \"./interface\";\nimport ExcelJS from \"exceljs\";\n\nconst ExportExcel = async <T>({\n  columns,\n  data,\n  grouping,\n  date,\n  excelSetting,\n  title\n}: GenaratorExport<T>): Promise<void> => {\n  const workbook = new ExcelJS.Workbook();\n  columns = columns.filter((item) => !item.options?.disabledColumn);\n  const worksheet = workbook.addWorksheet(title || excelSetting?.titleExcel);\n\n  const lastUsedColumnIndex = columns.length;\n\n  // Judul\n  const judul = worksheet.addRow([]);\n  judul.getCell(1).value = title || excelSetting?.titleExcel;\n  judul.getCell(1).alignment = { horizontal: \"center\" };\n  worksheet.mergeCells(\n    `A${judul.number}:${String.fromCharCode(64 + lastUsedColumnIndex)}${\n      judul.number\n    }`\n  );\n  judul.eachCell((cell) => {\n    cell.font = {\n      color: { argb: \"000000\" },\n      bold: true,\n      size: 12\n    };\n  });\n\n  // Tanggal\n  if (date) {\n    const tanggalRow = worksheet.addRow([]);\n    tanggalRow.getCell(1).value = `Tanggal : ${date?.start_date} ${\n      date?.end_date ? `s/d ${date?.end_date}` : \"\"\n    }`;\n    tanggalRow.getCell(1).alignment = { horizontal: \"center\" };\n\n    // Menggabungkan sel dari kolom A hingga kolom terakhir yang tidak terpakai pada baris tanggal\n    worksheet.mergeCells(\n      `A${tanggalRow.number}:${String.fromCharCode(64 + lastUsedColumnIndex)}${\n        tanggalRow.number\n      }`\n    );\n    tanggalRow.eachCell((cell) => {\n      cell.font = {\n        color: { argb: \"00000\" },\n        bold: true,\n        size: 12\n      };\n    });\n  }\n\n  // additional\n  const additionalText = worksheet.addRow([]);\n  additionalText.getCell(1).value = excelSetting?.additionalTextHeader || \"\";\n  additionalText.getCell(1).alignment = { horizontal: \"center\" };\n  worksheet.mergeCells(\n    `A${additionalText.number}:${String.fromCharCode(\n      64 + lastUsedColumnIndex\n    )}${additionalText.number}`\n  );\n  additionalText.eachCell((cell) => {\n    cell.font = { color: { argb: \"000000\" }, bold: true, size: 12 };\n  });\n\n  // Menambahkan header ke worksheet\n  const headerColumn = worksheet.addRow(columns);\n\n  // Menetapkan gaya untuk header\n  headerColumn.eachCell((cell) => {\n    cell.fill = {\n      type: \"pattern\",\n      pattern: \"solid\",\n      fgColor: { argb: excelSetting?.bgColor || \"#E8E5E5\" }, // Warna hijau yang diinginkan\n      bgColor: { argb: excelSetting?.bgColor || \"#E8E5E5\" }\n    };\n    cell.font = {\n      color: { argb: excelSetting?.txtColor },\n      bold: true\n    };\n\n    const columnValue = cell.value as unknown as ColumnGenarator<T>;\n\n    if (cell.value) {\n      cell.alignment = {\n        horizontal: `${\n          columnValue?.options?.halign\n            ? columnValue?.options?.halign\n            : columnValue?.options?.format === \"RP\" ||\n              columnValue?.options?.format === \"GR\"\n            ? \"right\"\n            : \"left\" || \"right\"\n        }`\n      };\n\n      cell.value = columnValue.label;\n    }\n  });\n\n  const totals: { [key: string]: number } = {};\n\n  data.forEach((item) => {\n    if (grouping.length > 0) {\n      const group = grouping.map((column) => ({\n        value:\n          item[column] !== undefined\n            ? `${formatingTitle(column)} : ` + item[column]\n            : \"\"\n      }));\n      worksheet.addRow(group.map((cellData) => cellData.value));\n      const subtotal: { [key: string]: number } = {};\n\n      item.detail.forEach((itemDetail: any) => {\n        const rowData = columns.map((column) => {\n          const value =\n            column?.options?.format === \"DATETIME\"\n              ? convertDateTime(\n                  itemDetail[column.key as keyof DataItemGenerator]\n                )\n              : itemDetail[column.key as keyof DataItemGenerator];\n          const alignment = {\n            horizontal: column?.options?.halign\n              ? column?.options?.halign\n              : column?.options?.format === \"RP\" ||\n                column?.options?.format === \"GR\"\n              ? \"right\"\n              : \"left\" || \"right\"\n          };\n          const columnKey = column.key as keyof DataItemGenerator;\n          totals[columnKey] = (totals[columnKey] || 0) + Number(value);\n          subtotal[columnKey] = (subtotal[columnKey] || 0) + Number(value);\n\n          return {\n            value,\n            alignment,\n            numFmt:\n              column?.options?.format === \"RP\"\n                ? \"#,##0\"\n                : column?.options?.format === \"GR\"\n                ? \"#,##0.000\"\n                : undefined\n          };\n        });\n\n        const row = worksheet.addRow(rowData.map((cellData) => cellData.value));\n\n        rowData.forEach((cellData, index) => {\n          const cell = row.getCell(index + 1);\n          cell.alignment = cellData.alignment;\n\n          if (cellData.numFmt) {\n            cell.numFmt = cellData.numFmt;\n          }\n        });\n      });\n      const subtotalRow = worksheet.addRow(columns.map(() => null)); // Create a row with null values\n\n      columns.forEach((column, columnIndex) => {\n        if (\n          column?.options?.format === \"RP\" ||\n          column?.options?.format === \"GR\"\n        ) {\n          const startRow = 4; // Adjust this based on the starting row for your data\n          const endRow = data.length + startRow - 1;\n          const totalFormula = `SUM(${String.fromCharCode(\n            65 + columnIndex\n          )}${startRow}:${String.fromCharCode(65 + columnIndex)}${endRow})`;\n          const grandTotalCell = subtotalRow.getCell(columnIndex + 1);\n          subtotalRow.getCell(1).value = \"SUB TOTAL\";\n          subtotalRow.getCell(1).alignment = { horizontal: \"center\" };\n\n          // Explicitly cast the cell to CellValue to set numFmt\n          (grandTotalCell as any).numFmt =\n            column?.options?.format === \"GR\" ? \"#,##0.000\" : \"#,##0\";\n          grandTotalCell.value = { formula: totalFormula };\n          subtotalRow.getCell(columnIndex + 1).value = column?.options\n            .disabledFooter\n            ? \"\"\n            : subtotal[column.key as keyof DataItemGenerator];\n        } else {\n          subtotalRow.getCell(columnIndex + 1).value = \"\";\n        }\n      });\n      if (excelSetting?.grandTotalSetting?.colSpan) {\n        worksheet.mergeCells(\n          `A${subtotalRow.number}:${String.fromCharCode(\n            64 + Number(excelSetting?.grandTotalSetting?.colSpan)\n          )}${subtotalRow.number}`\n        );\n      }\n      subtotalRow.eachCell((cell) => {\n        cell.fill = {\n          type: \"pattern\",\n          pattern: \"solid\",\n          fgColor: { argb: excelSetting?.bgColor || \"#E8E5E5\" }, // Warna hijau yang diinginkan\n          bgColor: { argb: excelSetting?.bgColor || \"#E8E5E5\" }\n        };\n        cell.font = {\n          color: { argb: excelSetting?.txtColor },\n          bold: true\n        };\n      });\n    } else {\n      const rowData = columns.map((column) => {\n        const value =\n          column?.options?.format === \"DATETIME\"\n            ? convertDateTime(item[column.key as keyof DataItemGenerator])\n            : item[column.key as keyof DataItemGenerator];\n        const alignment = {\n          vertical: \"middle\",\n          horizontal: column?.options?.halign\n            ? column?.options?.halign\n            : column?.options?.format === \"RP\" ||\n              column?.options?.format === \"GR\"\n            ? \"right\"\n            : \"left\" || \"right\"\n        };\n\n        const columnKey = column.key as keyof DataItemGenerator;\n        totals[columnKey] = (totals[columnKey] || 0) + Number(value);\n\n        return {\n          value,\n          options: column?.options,\n          alignment,\n          numFmt:\n            column?.options?.format === \"RP\"\n              ? \"#,##0\"\n              : column?.options?.format === \"GR\"\n              ? \"#,##0.000\"\n              : column?.options?.barcodeOption !== undefined\n              ? \"BARCODE\"\n              : undefined\n        };\n      });\n\n      const row = worksheet.addRow(rowData.map((cellData) => cellData.value));\n\n      rowData.forEach((cellData, index) => {\n        const cell = row.getCell(index + 1);\n\n        // console.log(cellData.options?.showTextBarcode);\n\n        const barcodeOption = cellData.options?.barcodeOption;\n        if (barcodeOption !== undefined) {\n          // console.log(worksheet.getColumn(\"A4\").number);\n          const canvas = document.createElement(\"canvas\");\n          BwipJs.toCanvas(canvas, {\n            bcid: barcodeOption.format || \"code128\", // Barcode type\n            text: String(cellData.value), // Text to encode\n            scale: 3, // 3x scaling factor\n            height: 10, // Bar height, in millimeters\n            includetext: barcodeOption.showText || true, // Show human-readable text\n            textxalign: \"center\"\n          });\n\n          const imageId = cell.workbook.addImage({\n            base64: canvas.toDataURL(\"image/png\"),\n            extension: \"png\"\n          });\n\n          row.height = barcodeOption.heightColumn || 39;\n          const firstColumn = worksheet.getColumn(index + 1);\n          firstColumn.width = barcodeOption.widthColumn || 12;\n\n          worksheet.addImage(imageId, {\n            tl: {\n              col: index + 1 - 1,\n              row: Number(cell.row || 0) - 1\n            }, // Gunakan nomor baris yang benar\n            ext: {\n              width: barcodeOption.widthBarcode || 100,\n              height: barcodeOption.heightBarcode || 50\n            } // Sesuaikan dengan ukuran gambar Anda\n          });\n\n          cell.alignment = { horizontal: \"center\" };\n\n          cell.value = \"\";\n          // Tidak perlu mengembalikan nilai untuk kolom gambar barcode\n          return null;\n        }\n        const vertical = cellData.alignment.vertical\n          ? String(cellData.alignment.vertical || \"bottom\")\n          : \"bottom\";\n\n        let verticalAlignment: any = \"\"; // Default value\n\n        // Check if the value is valid and assign it\n        if (\n          vertical === \"middle\" ||\n          vertical === \"bottom\" ||\n          vertical === \"justify\" ||\n          vertical === \"distributed\" ||\n          vertical === \"top\"\n        ) {\n          verticalAlignment = vertical as any;\n        }\n\n        cell.alignment = {\n          horizontal: cellData.alignment.horizontal,\n          vertical: verticalAlignment\n        };\n\n        if (cellData.numFmt) {\n          cell.numFmt = cellData.numFmt;\n        }\n      });\n    }\n  });\n\n  const grandTotalRow = worksheet.addRow(columns.map(() => null)); // Create a row with null values\n\n  columns.forEach((column, columnIndex) => {\n    if (column?.options?.format === \"RP\" || column?.options?.format === \"GR\") {\n      const startRow = 4; // Adjust this based on the starting row for your data\n      const endRow = data.length + startRow - 1;\n      const totalFormula = `SUM(${String.fromCharCode(\n        65 + columnIndex\n      )}${startRow}:${String.fromCharCode(65 + columnIndex)}${endRow})`;\n      const grandTotalCell = grandTotalRow.getCell(columnIndex + 1);\n      grandTotalRow.getCell(1).value = \"GRAND TOTAL\";\n      grandTotalRow.getCell(1).alignment = { horizontal: \"center\" };\n\n      (grandTotalCell as any).numFmt =\n        column?.options?.format === \"GR\" ? \"#,##0.000\" : \"#,##0\";\n      grandTotalCell.value = { formula: totalFormula };\n      grandTotalRow.getCell(columnIndex + 1).value = column?.options\n        .disabledFooter\n        ? \"\"\n        : totals[column.key as keyof DataItemGenerator];\n    } else {\n      grandTotalRow.getCell(columnIndex + 1).value = \"\";\n    }\n  });\n  if (excelSetting?.grandTotalSetting?.colSpan) {\n    worksheet.mergeCells(\n      `A${grandTotalRow.number}:${String.fromCharCode(\n        64 + Number(excelSetting?.grandTotalSetting?.colSpan)\n      )}${grandTotalRow.number}`\n    );\n  }\n  grandTotalRow.eachCell((cell) => {\n    cell.fill = {\n      type: \"pattern\",\n      pattern: \"solid\",\n      fgColor: { argb: excelSetting?.bgColor || \"#E8E5E5\" }, // Warna hijau yang diinginkan\n      bgColor: { argb: excelSetting?.bgColor || \"#E8E5E5\" }\n    };\n    cell.font = {\n      color: { argb: excelSetting?.txtColor },\n      bold: true\n    };\n  });\n\n  const buffer = await workbook.xlsx.writeBuffer();\n  const blob = new Blob([buffer], {\n    type: \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\n  });\n  const link = document.createElement(\"a\");\n  link.href = URL.createObjectURL(blob);\n  link.download = `${title || excelSetting?.titleExcel}.xlsx`;\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n};\n\nexport default ExportExcel;\n\nconst formatingTitle = (title: string): string => {\n  // Pisahkan kata-kata menggunakan underscore sebagai pemisah\n  const words = title.split(\"_\");\n\n  // Ubah setiap kata menjadi huruf kapital dan gabungkan kembali dengan spasi di antara mereka\n  const formattedtitle = words\n    .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n    .join(\" \");\n\n  return formattedtitle;\n};\n","export function convertDateTime(tgl: string) {\n  const now = new Date(tgl);\n  const year = now.getFullYear();\n  const month = String(now.getMonth() + 1).padStart(2, \"0\");\n  const day = String(now.getDate()).padStart(2, \"0\");\n  const hours = String(now.getHours()).padStart(2, \"0\");\n  const minutes = String(now.getMinutes()).padStart(2, \"0\");\n  const seconds = String(now.getSeconds()).padStart(2, \"0\");\n  const currentDateTime = `${day}-${month}-${year} ${hours}:${minutes}:${seconds}`;\n  return currentDateTime;\n}\n","import { DataItemGenerator, GenaratorExport } from \"./interface\";\nimport { convertDateTime } from \"./helpers\";\nimport jsPDF from \"jspdf\";\nimport autoTable from \"jspdf-autotable\";\nconst ExportPDF = <T>({\n  columns,\n  data,\n  grouping,\n  pdfSetting,\n  date,\n  title\n}: GenaratorExport<T>): void => {\n  const doc: jsPDF = new jsPDF(pdfSetting?.orientation, pdfSetting?.unit, [\n    pdfSetting?.width || 297,\n    pdfSetting?.height || 210\n  ]);\n  let tableRows: any[] = [];\n  let finalY = date ? 30 : 20;\n  columns = columns.filter((item) => !item.options?.disabledColumn);\n\n  doc.setFontSize(10);\n  const widthPortrait = doc.internal.pageSize.getWidth();\n\n  const headerLeft = doc.splitTextToSize(pdfSetting?.textHeaderLeft || \"\", 110);\n  doc.text(headerLeft, 15, 18);\n\n  //Text Kanan\n  doc.text(`${title || pdfSetting?.titlePdf}`, widthPortrait - 15, 18, {\n    align: \"right\"\n  });\n\n  if (date) {\n    doc.text(\n      `Tanggal : ${date?.start_date} ${\n        date?.end_date ? `s/d ${date?.end_date}` : \"\"\n      }`,\n      widthPortrait - 15,\n      22,\n      { align: \"right\" }\n    );\n  }\n  doc.setProperties({\n    title: title || pdfSetting?.titlePdf\n  });\n\n  // Header Tabel\n  const tableHeader = columns.map((column) => {\n    return {\n      content: column.label,\n      key: column.key,\n      options: column?.options,\n      styles: {\n        textColor: `#${pdfSetting?.txtColor || \"000\"}`,\n        fillColor: `#${pdfSetting?.bgColor || \"E8E5E5\"}`,\n        fontStyle: \"bold\",\n        halign: column?.options?.halign\n          ? column?.options?.halign\n          : column?.options?.format === \"RP\" || column?.options?.format === \"GR\"\n          ? \"right\"\n          : \"left\"\n      }\n    };\n  });\n\n  tableRows.push(tableHeader);\n\n  // Body Tabel\n  const totals: { [key: string]: number } = {};\n\n  data.forEach((item) => {\n    if (grouping.length > 0) {\n      const group = grouping.map((column) => ({\n        content:\n          item[column] !== undefined\n            ? `${formatingTitle(column)} : ` + item[column]\n            : \"\"\n      }));\n      tableRows.push(group);\n      const subtotal: { [key: string]: number } = {};\n\n      item.detail.forEach((list2: any) => {\n        const rowData = columns.map((column) => {\n          const value = list2[column.key as keyof DataItemGenerator];\n          const columnKey = column.key as keyof DataItemGenerator;\n          totals[columnKey] = (totals[columnKey] || 0) + Number(value);\n          subtotal[columnKey] = (subtotal[columnKey] || 0) + Number(value);\n          return {\n            content: (() => {\n              switch (column?.options?.format) {\n                case \"RP\":\n                  return list2[column.key] !== undefined\n                    ? Number(list2[column.key] || 0).toLocaleString(\"kr-ko\")\n                    : \"\";\n                case \"GR\":\n                  return list2[column.key] !== undefined\n                    ? Number(list2[column.key] || 0).toFixed(3)\n                    : \"\";\n                case \"DATETIME\":\n                  return list2[column.key] !== undefined\n                    ? convertDateTime(list2[column.key] || new Date())\n                    : \"\";\n                default:\n                  return list2[column.key] !== undefined\n                    ? list2[column.key].toString()\n                    : \"\";\n              }\n            })(),\n            styles: {\n              halign: column?.options?.halign\n                ? column?.options?.halign\n                : column?.options?.format === \"RP\" ||\n                  column?.options?.format === \"GR\"\n                ? \"right\"\n                : typeof list2[column.key] === \"number\"\n                ? \"right\"\n                : \"left\"\n            }\n          };\n        });\n\n        tableRows.push(rowData);\n      });\n\n      const footersubtotal: any = [];\n      columns.forEach((column) => {\n        const total = subtotal[column.key as keyof DataItemGenerator];\n        if (\n          column?.options?.format === \"RP\" ||\n          column?.options?.format === \"GR\"\n        ) {\n          const row = {\n            content: column?.options?.disabledFooter\n              ? \"\"\n              : (() => {\n                  switch (column?.options?.format) {\n                    case \"RP\":\n                      return total.toLocaleString(\"kr-ko\");\n                    case \"GR\":\n                      return total.toFixed(3);\n                    default:\n                      return total.toString();\n                  }\n                })(),\n            styles: {\n              halign: column?.options?.halign\n                ? column?.options?.halign\n                : column?.options?.format === \"RP\" ||\n                  column?.options?.format === \"GR\"\n                ? \"right\"\n                : \"left\",\n              textColor: `#${pdfSetting?.txtColor || \"000\"}`,\n              fillColor: `#${pdfSetting?.bgColor || \"E8E5E5\"}`,\n              fontStyle: \"bold\"\n            }\n          };\n\n          footersubtotal.push(row);\n        } else {\n          footersubtotal.push({\n            content: \"\",\n            styles: {\n              textColor: `#${pdfSetting?.txtColor || \"000\"}`,\n              fillColor: `#${pdfSetting?.bgColor || \"E8E5E5\"}`,\n              fontStyle: \"bold\"\n            }\n          });\n        }\n      });\n      const colSpan = pdfSetting?.grandTotalSetting?.colSpan\n        ? Number(pdfSetting?.grandTotalSetting?.colSpan || 0) + 1\n        : 0;\n      footersubtotal[0] = {\n        content: \"SUB TOTAL\",\n        colSpan: colSpan,\n        styles: {\n          textColor: `#${pdfSetting?.txtColor || \"000\"}`,\n          fillColor: `#${pdfSetting?.bgColor || \"E8E5E5\"}`,\n          fontStyle: \"bold\",\n          halign: \"center\"\n        }\n      };\n      if (pdfSetting?.grandTotalSetting?.colSpan) {\n        footersubtotal.splice(1, pdfSetting?.grandTotalSetting?.colSpan);\n      }\n      tableRows.push(footersubtotal);\n    } else {\n      const rowData = columns.map((column) => {\n        const value = item[column.key as keyof DataItemGenerator];\n        const columnKey = column.key as keyof DataItemGenerator;\n        totals[columnKey] = (totals[columnKey] || 0) + Number(value);\n        return {\n          options: column?.options,\n          content: (() => {\n            switch (column?.options?.format) {\n              case \"RP\":\n                return item[column.key as keyof DataItemGenerator] !== undefined\n                  ? Number(\n                      item[column.key as keyof DataItemGenerator] || 0\n                    ).toLocaleString(\"kr-ko\")\n                  : \"\";\n              case \"GR\":\n                return item[column.key as keyof DataItemGenerator] !== undefined\n                  ? Number(\n                      item[column.key as keyof DataItemGenerator] || 0\n                    ).toFixed(3)\n                  : \"\";\n              case \"DATETIME\":\n                return item[column.key as keyof DataItemGenerator] !== undefined\n                  ? convertDateTime(\n                      item[column.key as keyof DataItemGenerator] || new Date()\n                    )\n                  : \"\";\n              default:\n                return item[column.key as keyof DataItemGenerator] !== undefined\n                  ? item[column.key as keyof DataItemGenerator].toString()\n                  : \"\";\n            }\n          })(),\n          styles: {\n            halign: column?.options?.halign\n              ? column?.options?.halign\n              : column?.options?.format === \"RP\" ||\n                column?.options?.format === \"GR\"\n              ? \"right\"\n              : typeof item[column.key as keyof DataItemGenerator] === \"number\"\n              ? \"right\"\n              : \"left\"\n          }\n        };\n      });\n      tableRows.push(rowData);\n    }\n  });\n\n  const grandTotal: any = [];\n  columns.forEach((column) => {\n    const total = totals[column.key as keyof DataItemGenerator];\n    if (column?.options?.format === \"RP\" || column?.options?.format === \"GR\") {\n      const row = {\n        options: column?.options,\n        content: column?.options?.disabledFooter\n          ? \"\"\n          : (() => {\n              switch (column?.options?.format) {\n                case \"RP\":\n                  return total.toLocaleString(\"kr-ko\");\n                case \"GR\":\n                  return total.toFixed(3);\n                default:\n                  return total.toString();\n              }\n            })(),\n        styles: {\n          halign: column?.options?.halign\n            ? column?.options?.halign\n            : column?.options?.format === \"RP\" ||\n              column?.options?.format === \"GR\"\n            ? \"right\"\n            : \"left\",\n          textColor: `#${pdfSetting?.txtColor || \"000\"}`,\n          fillColor: `#${pdfSetting?.bgColor || \"E8E5E5\"}`,\n          fontStyle: \"bold\"\n        }\n      };\n\n      grandTotal.push(row);\n    } else {\n      grandTotal.push({\n        content: \"\",\n        options: column?.options,\n        styles: {\n          textColor: `#${pdfSetting?.txtColor || \"000\"}`,\n          fillColor: `#${pdfSetting?.bgColor || \"E8E5E5\"}`,\n          fontStyle: \"bold\"\n        }\n      });\n    }\n  });\n\n  const colSpan = pdfSetting?.grandTotalSetting?.colSpan\n    ? Number(pdfSetting?.grandTotalSetting?.colSpan || 0) + 1\n    : 0;\n\n  if (!pdfSetting?.grandTotalSetting?.disableGrandTotal) {\n    grandTotal[0] = {\n      content: \"GRAND TOTAL\",\n      colSpan: colSpan,\n      styles: {\n        textColor: `#${pdfSetting?.txtColor || \"000\"}`,\n        fillColor: `#${pdfSetting?.bgColor || \"E8E5E5\"}`,\n        fontStyle: \"bold\",\n        halign: \"center\"\n      }\n    };\n    if (pdfSetting?.grandTotalSetting?.colSpan) {\n      grandTotal.splice(1, pdfSetting?.grandTotalSetting?.colSpan);\n    }\n\n    tableRows.push(grandTotal);\n  }\n\n  tableRows.push([\n    {\n      content: `Print Date : ${convertDateTime(`${new Date()}`)}`,\n      colSpan: columns.length,\n      styles: {\n        textColor: `#${pdfSetting?.txtColor || \"000\"}`,\n        fillColor: `#${pdfSetting?.bgColor || \"E8E5E5\"}`,\n        fontStyle: \"italic\"\n      }\n    }\n  ]);\n\n  autoTable(doc, {\n    head: [],\n    body: tableRows,\n    startY: finalY,\n    theme: pdfSetting?.theme || \"plain\",\n    rowPageBreak: \"avoid\",\n    margin: { top: 10 },\n    bodyStyles: { fontSize: pdfSetting?.fontSIze || 8 },\n    headStyles: {\n      fontSize: pdfSetting?.fontSIze || 8,\n      textColor: `#${pdfSetting?.txtColor || \"000\"}`,\n      fillColor: `#${pdfSetting?.bgColor || \"E8E5E5\"}`\n    },\n    tableLineColor: [255, 255, 255]\n  });\n  tableRows = [];\n  finalY = (doc as any).lastAutoTable.finalY;\n  +3;\n\n  const pages = (doc as any).internal.getNumberOfPages();\n  const pageWidth = doc.internal.pageSize.width;\n  const pageHeight = doc.internal.pageSize.height;\n\n  doc.setFontSize(10);\n\n  for (let j = 1; j < pages + 1; j++) {\n    const horizontalPos = pageWidth / 2;\n    const verticalPos = pageHeight - 10;\n    doc.setPage(j);\n    doc.text(`${j} of ${pages}`, horizontalPos, verticalPos, {\n      align: \"center\"\n    });\n  }\n\n  if (pdfSetting?.openNewTab) {\n    const blob = doc.output(\"bloburl\");\n    window.open(blob);\n  } else {\n    doc.save(`${title || pdfSetting?.titlePdf}.pdf`);\n  }\n};\n\nconst formatingTitle = (title: string): string => {\n  // Pisahkan kata-kata menggunakan underscore sebagai pemisah\n  const words = title.split(\"_\");\n\n  // Ubah setiap kata menjadi huruf kapital dan gabungkan kembali dengan spasi di antara mereka\n  const formattedtitle = words\n    .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n    .join(\" \");\n\n  return formattedtitle;\n};\nexport default ExportPDF;\n","interface Load {\n  [key: string]: string | string[] | undefined;\n}\ninterface Res {\n  data: Load[];\n  template: string;\n}\nconst generateNotaSlip = (res: Res): string[] => {\n  const notaGenerated: string[] = [];\n\n  for (let index = 0; index < 1; index++) {\n    const nota: string[] = res.data.map((load: Load) => {\n      let replaceLoop = res.template;\n\n      while (/\\n!!LOOP\\((.+)\\)(\\{\\n(.*\\n)+\\})\\n/gm.exec(replaceLoop)) {\n        replaceLoop = replaceLoop.replace(\n          /\\n!!LOOP\\((.+)\\)(\\{\\n(.*\\n)+\\})\\n/,\n          (_match, p1, p2) => {\n            const loopContent = p2.replace(/^\\{/, \"\").replace(/\\}$/, \"\");\n            const loopArray: string[] | undefined = !Array.isArray(load[p1])\n              ? [load[p1] as string]\n              : (load[p1] as string[]);\n            const detail: string = loopArray.reduce((acc, val) => {\n              return (\n                acc +\n                loopContent.replace(/\\{([a-z0-9_]+)\\}/gm, (c: any) => {\n                  const key = c.replace(/(\\{|\\})/g, \"\");\n                  if (key.match(/nama_barang/)) {\n                    const keyCustomer = key.match(/nama_barang/);\n                    const sliceNamaBarang =\n                      key === \"nama_barang2\"\n                        ? [20, 40]\n                        : key === \"nama_barang3\"\n                        ? [40, 60]\n                        : [0, 20];\n                    return (\n                      (val[keyCustomer] as string)\n                        ?.slice(...sliceNamaBarang)\n                        .trim() || \"\"\n                    );\n                  }\n                  if (key.match(/deskripsi_jual/)) {\n                    const keyDeskripsi = key.match(/deskripsi_jual/);\n                    const sliceDeskripsi =\n                      key === \"deskripsi_jual2\"\n                        ? [20, 40]\n                        : key === \"deskripsi_jual3\"\n                        ? [40, 60]\n                        : [0, 20];\n                    return (\n                      (val[keyDeskripsi] as string)\n                        ?.slice(...sliceDeskripsi)\n                        .trim() || \"\"\n                    );\n                  }\n                  if (key.match(/deskripsi/)) {\n                    const keyCustomer = key.match(/deskripsi/);\n                    const sliceNama =\n                      key === \"deskripsi2\"\n                        ? [20, 40]\n                        : key === \"deskripsi3\"\n                        ? [40, 60]\n                        : [0, 20];\n                    return (\n                      (val[keyCustomer] as string)\n                        ?.slice(...sliceNama)\n                        .trim() || \"\"\n                    );\n                  }\n                  return (val[key] as string) || \"\";\n                })\n              );\n            }, \"\");\n            return detail.replace(/\\n(\\s)+\\n/gm, \"\\n\");\n          }\n        );\n      }\n\n      return replaceLoop\n        .replace(/\\{([a-z0-9_]+)\\}/gm, (c) => {\n          const key = c.replace(/(\\{|\\})/g, \"\");\n          if (key === \"intenal_external\") {\n            return index === 0 ? \"Pelanggan\" : \"Internal\";\n          }\n          if (key.match(/auto_cut/)) {\n            return \"\\n\u001dVA\";\n          }\n          return (load[key] as string) || \"\";\n        })\n        .replace(/\\n(\\s)+\\n/gm, \"\\n\")\n        .replace(/~new_line~/gm, \"\\n\")\n        .replace(/!!LOOP\\(detail_barang\\)/g, \"\")\n        .replace(/[}{]/g, \"\");\n    });\n\n    for (const key in nota) {\n      nota[key] += \"\\n\\n\";\n    }\n\n    notaGenerated.push(...nota);\n  }\n\n  return notaGenerated;\n};\n\nconst ExportToTxt = async (res: any, nama_file: string): Promise<void> => {\n  const notaGenerated = generateNotaSlip(res);\n  const blob = new Blob([notaGenerated?.join(\"\\n\") || \"\"], {\n    type: \"text/plain\"\n  });\n  const downloadLink = document.createElement(\"a\");\n  downloadLink.href = URL.createObjectURL(blob);\n  downloadLink.download = nama_file;\n  document.body.appendChild(downloadLink);\n  downloadLink.click();\n  document.body.removeChild(downloadLink);\n};\n\nexport default ExportToTxt;\n","import ExportExcel from \"./exportExcel\";\nimport ExportPDF from \"./exportPdf\";\nimport ExportToTxt from \"./exportTextFile\";\nimport { GenaratorExport } from \"./interface\";\nexport * from \"./interface\";\n\n/**\n * Ekspor ke PDF atau Excel berdasarkan konfigurasi yang diberikan.\n *\n * @param title - Judul laporan.\n * @param columns - Konfigurasi kolom untuk laporan.\n * @param data - Data yang akan disertakan dalam laporan.\n * @param grouping - Gruping yang akan diterapkan dalam laporan ada head dan detail Example: [\"no_faktur_hutang\"].\n * @param pdfSetting - Opsi untuk config PDF.\n * @param excelSetting - Opsi untuk config Excel.\n * @param txtSetting - Opsi untuk config Txt file.\n * @param date - Rentang tanggal untuk laporan.\n * @param type - Jenis laporan yang akan diekspor (\"PDF\" \"TXT\" atau \"EXCEL\").\n */\nexport const ExportData = <T>({\n  columns,\n  data,\n  grouping,\n  date,\n  type,\n  txtSetting,\n  pdfSetting,\n  excelSetting,\n  title\n}: GenaratorExport<T>): void => {\n  const databaru = {\n    data: txtSetting?.dataTxt?.length\n      ? txtSetting?.dataTxt\n      : [txtSetting?.dataTxt],\n    template: txtSetting?.templateTxt\n  };\n\n  type.forEach((list) => {\n    if (list === \"PDF\") {\n      ExportPDF({\n        pdfSetting,\n        date,\n        data,\n        type,\n        columns,\n        grouping,\n        title\n      });\n    } else if (list === \"TXT\") {\n      ExportToTxt(databaru, txtSetting?.titleTxt || \"\");\n    } else if (list === \"EXCEL\") {\n      ExportExcel({\n        date,\n        data,\n        type,\n        columns,\n        grouping,\n        excelSetting,\n        title\n      });\n    } else {\n      ExportExcel({\n        date,\n        data,\n        type,\n        columns,\n        grouping,\n        excelSetting,\n        title\n      });\n\n      ExportPDF({\n        pdfSetting,\n        date,\n        data,\n        type,\n        columns,\n        grouping,\n        title\n      });\n\n      ExportToTxt(databaru, txtSetting?.titleTxt || \"\");\n    }\n  });\n  // if (type === \"PDF\") {\n};\n"]}